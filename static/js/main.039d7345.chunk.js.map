{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Separator","View","style","styles","separator","StyleSheet","create","container","flex","justifyContent","marginHorizontal","title","textAlign","marginVertical","fixToText","flexDirection","borderBottomColor","borderBottomWidth","hairlineWidth","App","SafeAreaView","buttonBox","Button","onPress","success","Clipboard","setString","console","log","TextInput","multiline","placeholder","textInput","ScrollView","contentContainerStyle","Text","value","Platform","OS","Version","isTV","toString","isPad","JSON","stringify","constants","alert","color","disabled","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sTAcMA,EAAY,kBAAM,cAACC,EAAA,EAAD,CAAMC,MAAOC,EAAOC,aA2F5C,IAAMD,EAASE,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNC,eAAgB,SAChBC,iBAAkB,IAEpBC,MAAO,CACLC,UAAW,SACXC,eAAgB,GAElBC,UAAW,CACTC,cAAe,MACfN,eAAgB,iBAElBL,UAAW,CACTS,eAAgB,EAChBG,kBAAmB,UACnBC,kBAAmBZ,IAAWa,iBAInBC,EA9Gf,WAAgB,IAAD,IAQb,OACE,eAACC,EAAA,EAAD,CAAclB,MAAOC,EAAOI,UAA5B,UACE,sBAAKL,MAAO,CAAEU,UAAW,UAAzB,UACE,oDACA,cAACX,EAAA,EAAD,CAAMC,MAAOC,EAAOkB,UAApB,SACE,cAACC,EAAA,EAAD,CAAQC,QAZE,WAChB,IAAMC,EAAUC,IAAUC,UACxB,yDAEFC,QAAQC,IAAR,uCAA4CJ,KAQVb,MAAM,wBAEpC,cAACkB,EAAA,EAAD,CACEC,WAAW,EACXC,YAAa,8BACb7B,MAAOC,EAAO6B,eAGlB,eAACC,EAAA,EAAD,CAAYC,sBAAuB/B,EAAOI,UAA1C,UACE,eAAC4B,EAAA,EAAD,CAAMjC,MAAOC,EAAOiC,MAApB,yBAAiCC,UAAjC,IAAiCA,SAAjC,EAAiCA,IAAUC,MAC3C,eAACH,EAAA,EAAD,CAAMjC,MAAOC,EAAOiC,MAApB,iCAAyCC,UAAzC,IAAyCA,SAAzC,EAAyCA,IAAUE,WACnD,eAACJ,EAAA,EAAD,CAAMjC,MAAOC,EAAOiC,MAApB,2BAAmCC,UAAnC,IAAmCA,KAAnC,UAAmCA,IAAUG,YAA7C,aAAmC,EAAgBC,cAClC,QAAhBJ,IAASC,IACR,eAACH,EAAA,EAAD,CAAMjC,MAAOC,EAAOiC,MAApB,4BACWC,UADX,IACWA,KADX,UACWA,IAAUK,aADrB,aACW,EAAiBD,cAG9B,cAACN,EAAA,EAAD,wBACA,cAACA,EAAA,EAAD,CAAMjC,MAAOC,EAAOiC,MAApB,SACGO,KAAKC,UAAL,OAAeP,UAAf,IAAeA,SAAf,EAAeA,IAAUQ,UAAW,KAAM,QAG/C,eAAC5C,EAAA,EAAD,WACE,cAACkC,EAAA,EAAD,CAAMjC,MAAOC,EAAOQ,MAApB,+IAIA,cAACW,EAAA,EAAD,CACEX,MAAM,WACNY,QAAS,kBAAMuB,MAAM,+BAGzB,cAAC,EAAD,IACA,eAAC7C,EAAA,EAAD,WACE,cAACkC,EAAA,EAAD,CAAMjC,MAAOC,EAAOQ,MAApB,sMAKA,cAACW,EAAA,EAAD,CACEX,MAAM,WACNoC,MAAM,UACNxB,QAAS,kBAAMuB,MAAM,4CAGzB,cAAC,EAAD,IACA,eAAC7C,EAAA,EAAD,WACE,cAACkC,EAAA,EAAD,CAAMjC,MAAOC,EAAOQ,MAApB,6DAGA,cAACW,EAAA,EAAD,CACEX,MAAM,WACNqC,UAAQ,EACRzB,QAAS,kBAAMuB,MAAM,+BAGzB,cAAC,EAAD,IACA,eAAC7C,EAAA,EAAD,WACE,cAACkC,EAAA,EAAD,CAAMjC,MAAOC,EAAOQ,MAApB,iFAGA,eAACV,EAAA,EAAD,CAAMC,MAAOC,EAAOW,UAApB,UACE,cAACQ,EAAA,EAAD,CACEX,MAAM,cACNY,QAAS,kBAAMuB,MAAM,0BAEvB,cAACxB,EAAA,EAAD,CACEX,MAAM,eACNY,QAAS,kBAAMuB,MAAM,qCCrFbG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN/C,QAAQ+C,MAAMA,EAAMC,YE/G5BrB,M","file":"static/js/main.039d7345.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  Clipboard,\n  Platform,\n  SafeAreaView,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TextInput,\n  View,\n} from \"react-native\";\nimport \"./App.css\";\n\nconst Separator = () => <View style={styles.separator} />;\n\nfunction App() {\n  const setString = () => {\n    const success = Clipboard.setString(\n      \"This text was copied to the clipboard by React Native\"\n    );\n    console.log(`Clipboard.setString success? ${success}`);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <div style={{ textAlign: \"center\" }}>\n        <h1>Div tag with p Tag</h1>\n        <View style={styles.buttonBox}>\n          <Button onPress={setString} title=\"Copy to clipboard\" />\n        </View>\n        <TextInput\n          multiline={true}\n          placeholder={\"Try pasting here afterwards\"}\n          style={styles.textInput}\n        />\n      </div>\n      <ScrollView contentContainerStyle={styles.container}>\n        <Text style={styles.value}>OS = {Platform?.OS}</Text>\n        <Text style={styles.value}>OS Version = {Platform?.Version}</Text>\n        <Text style={styles.value}>isTV = {Platform?.isTV?.toString()}</Text>\n        {Platform.OS === \"ios\" && (\n          <Text style={styles.value}>\n            isPad = {Platform?.isPad?.toString()}\n          </Text>\n        )}\n        <Text>Constants</Text>\n        <Text style={styles.value}>\n          {JSON.stringify(Platform?.constants, null, 2)}\n        </Text>\n      </ScrollView>\n      <View>\n        <Text style={styles.title}>\n          The title and onPress handler are required. It is recommended to set\n          accessibilityLabel to help make your app usable by everyone.\n        </Text>\n        <Button\n          title=\"Press me\"\n          onPress={() => alert(\"Simple Button pressed\")}\n        />\n      </View>\n      <Separator />\n      <View>\n        <Text style={styles.title}>\n          Adjust the color in a way that looks standard on each platform. On\n          iOS, the color prop controls the color of the text. On Android, the\n          color adjusts the background color of the button.\n        </Text>\n        <Button\n          title=\"Press me\"\n          color=\"#f194ff\"\n          onPress={() => alert(\"Button with adjusted color pressed\")}\n        />\n      </View>\n      <Separator />\n      <View>\n        <Text style={styles.title}>\n          All interaction for the component are disabled.\n        </Text>\n        <Button\n          title=\"Press me\"\n          disabled\n          onPress={() => alert(\"Cannot press this one\")}\n        />\n      </View>\n      <Separator />\n      <View>\n        <Text style={styles.title}>\n          This layout strategy lets the title define the width of the button.\n        </Text>\n        <View style={styles.fixToText}>\n          <Button\n            title=\"Left button\"\n            onPress={() => alert(\"Left button pressed\")}\n          />\n          <Button\n            title=\"Right button\"\n            onPress={() => alert(\"Right button pressed\")}\n          />\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    marginHorizontal: 16,\n  },\n  title: {\n    textAlign: \"center\",\n    marginVertical: 8,\n  },\n  fixToText: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  separator: {\n    marginVertical: 8,\n    borderBottomColor: \"#737373\",\n    borderBottomWidth: StyleSheet.hairlineWidth,\n  },\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}